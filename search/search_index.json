{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PicsSmart Documentation PicsSmart is a Smart Media Cloud Application that provides features such as: Automatic Image Captioning Face Detection and Clustering Smart image search using text prompts Similar photos suggestion Smart image search using image prompt This application preserves privacy of the user data by using a Federated Learning architecture. Application Architecture The application is divided into three main components: Core Application Client Application Federated Server The high level architecture of the application is illustrated in the below diagram. Repositories Core Application Client Application Federated Server","title":"Home"},{"location":"#welcome-to-picssmart-documentation","text":"PicsSmart is a Smart Media Cloud Application that provides features such as: Automatic Image Captioning Face Detection and Clustering Smart image search using text prompts Similar photos suggestion Smart image search using image prompt This application preserves privacy of the user data by using a Federated Learning architecture.","title":"Welcome to PicsSmart Documentation"},{"location":"#application-architecture","text":"The application is divided into three main components: Core Application Client Application Federated Server The high level architecture of the application is illustrated in the below diagram.","title":"Application Architecture"},{"location":"#repositories","text":"Core Application Client Application Federated Server","title":"Repositories"},{"location":"client/","text":"PicsSmart-Client This component contains the frontend service of the PicsSmart application. This can be run as a standalone service in the client machine. Deploying Run in development mode Clone the repository git clone https://github.com/PicsSmart/picssmart-client.git Prerequisites Node Install the dependencies npm install Run the application npm run dev Install the application In here there are two options. You can either build from scratch or install picssmart-client application from the latest release in the picssmart-core repository accoridng to your client operating system.","title":"Client"},{"location":"client/#picssmart-client","text":"This component contains the frontend service of the PicsSmart application. This can be run as a standalone service in the client machine.","title":"PicsSmart-Client"},{"location":"client/#deploying","text":"","title":"Deploying"},{"location":"client/#run-in-development-mode","text":"","title":"Run in development mode"},{"location":"client/#clone-the-repository","text":"git clone https://github.com/PicsSmart/picssmart-client.git","title":"Clone the repository"},{"location":"client/#prerequisites","text":"Node","title":"Prerequisites"},{"location":"client/#install-the-dependencies","text":"npm install","title":"Install the dependencies"},{"location":"client/#run-the-application","text":"npm run dev","title":"Run the application"},{"location":"client/#install-the-application","text":"In here there are two options. You can either build from scratch or install picssmart-client application from the latest release in the picssmart-core repository accoridng to your client operating system.","title":"Install the application"},{"location":"core/","text":"PicsSmart-Core This component contains the core backend service of the PicsSmart application. This can be run as a standalone service in the client machine. Application Architecture The Application Architecture is illustrated in the below diagram. Deploying Clone the repository git clone https://github.com/PicsSmart/picssmart-core.git Prerequisites Conda Docker Install the dependencies and enabling services ./setup-env.sh <conda-env-name> You may define the name of the conda environment you want to create. With this script, all the dependencies will be installed and below required services will be up and running as docker containers. MongoDB Mongo Express (Optional) Qdrant Vector Database Kafka Broker Zookeeper How to run the server Add a .env file as in below format inside the server folder mongo_db_host = \"localhost\" mongo_db_port = 27017 mongo_db_user = \"picssmartadmin\" mongo_db_password = \"picssmartpw\" mongo_db_database = \"picssmart\" mongo_db_auth = \"admin\" qdrant_host=\"localhost\" qdrant_port=6333 qdrant_collection=\"picssmart\" server_address_federated=\"127.0.0.1:8080\" # Address of the federated server After that server can be run using below command uvicorn server.__main__:create_app --factory --reload Clean DB entries To clean the database entries, run the below command python clean.py","title":"Core Application"},{"location":"core/#picssmart-core","text":"This component contains the core backend service of the PicsSmart application. This can be run as a standalone service in the client machine.","title":"PicsSmart-Core"},{"location":"core/#application-architecture","text":"The Application Architecture is illustrated in the below diagram.","title":"Application Architecture"},{"location":"core/#deploying","text":"","title":"Deploying"},{"location":"core/#clone-the-repository","text":"git clone https://github.com/PicsSmart/picssmart-core.git","title":"Clone the repository"},{"location":"core/#prerequisites","text":"Conda Docker","title":"Prerequisites"},{"location":"core/#install-the-dependencies-and-enabling-services","text":"./setup-env.sh <conda-env-name> You may define the name of the conda environment you want to create. With this script, all the dependencies will be installed and below required services will be up and running as docker containers. MongoDB Mongo Express (Optional) Qdrant Vector Database Kafka Broker Zookeeper","title":"Install the dependencies and enabling services"},{"location":"core/#how-to-run-the-server","text":"Add a .env file as in below format inside the server folder mongo_db_host = \"localhost\" mongo_db_port = 27017 mongo_db_user = \"picssmartadmin\" mongo_db_password = \"picssmartpw\" mongo_db_database = \"picssmart\" mongo_db_auth = \"admin\" qdrant_host=\"localhost\" qdrant_port=6333 qdrant_collection=\"picssmart\" server_address_federated=\"127.0.0.1:8080\" # Address of the federated server After that server can be run using below command uvicorn server.__main__:create_app --factory --reload","title":"How to run the server"},{"location":"core/#clean-db-entries","text":"To clean the database entries, run the below command python clean.py","title":"Clean DB entries"},{"location":"fed-server/","text":"PicsSmart-Federated-Server This component contains the federated server of the PicsSmart application. This can be deployed in any platform so that it has a public IP address. Then the Core application can connect to this using a gRPC tunnel. Deploying Clone the repository git clone https://github.com/PicsSmart/picssmart-fed-server.git Prerequisites Python Install the dependencies cd image-captioning python3 -m venv ./venv source venv/bin/activate pip install -r requirements.txt How to run the application cd image-captioning source venv/bin/activate python server.py","title":"Federated Server"},{"location":"fed-server/#picssmart-federated-server","text":"This component contains the federated server of the PicsSmart application. This can be deployed in any platform so that it has a public IP address. Then the Core application can connect to this using a gRPC tunnel.","title":"PicsSmart-Federated-Server"},{"location":"fed-server/#deploying","text":"","title":"Deploying"},{"location":"fed-server/#clone-the-repository","text":"git clone https://github.com/PicsSmart/picssmart-fed-server.git","title":"Clone the repository"},{"location":"fed-server/#prerequisites","text":"Python","title":"Prerequisites"},{"location":"fed-server/#install-the-dependencies","text":"cd image-captioning python3 -m venv ./venv source venv/bin/activate pip install -r requirements.txt","title":"Install the dependencies"},{"location":"fed-server/#how-to-run-the-application","text":"cd image-captioning source venv/bin/activate python server.py","title":"How to run the application"},{"location":"releases/","text":"Releases Version 1.0.0 (2024-05-14) This is the First Release of PicsSmart Personal Media Cloud Application. Features: Automatic Image Captioning Face Detection and Clustering Smart image search using text prompts Similar photo suggestion Smart image search using image prompt","title":"Releases"},{"location":"releases/#releases","text":"","title":"Releases"},{"location":"releases/#version-100-2024-05-14","text":"This is the First Release of PicsSmart Personal Media Cloud Application.","title":"Version 1.0.0 (2024-05-14)"},{"location":"releases/#features","text":"Automatic Image Captioning Face Detection and Clustering Smart image search using text prompts Similar photo suggestion Smart image search using image prompt","title":"Features:"}]}